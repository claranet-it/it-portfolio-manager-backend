service: it-portfolio-manager-backend
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-south-1
  timeout: 60
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:DescribeTable"
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:BatchWriteItem"
          Resource:
            - "Fn::GetAtt": [ ItPortfolioManagerSkillMatrix, Arn ]
            - "Fn::Join": [ '/', [ "Fn::GetAtt": [ ItPortfolioManagerSkillMatrix, Arn ], 'index', 'companyIndex' ] ]
            - "Fn::GetAtt": [ ItPortfolioManagerUserProfile, Arn ]
            - "Fn::Join": [ '/', [ "Fn::GetAtt": [ ItPortfolioManagerUserProfile, Arn ], 'index', 'companyIndex' ] ]
            - "Fn::GetAtt": [ ItPortfolioManagerEffort, Arn ]
            - "Fn::GetAtt": [ ItPortfolioManagerTasks, Arn ]
            - "Fn::GetAtt": [ ItPortfolioManagerTimeEntry, Arn ]
        - Effect: "Allow"
          Action:
            - "ssm:GetParameter"
          Resource:
            - arn:aws:ssm:${self:provider.region}:*:parameter/it-portfolio-manager/${opt:stage, 'dev'}/*
  stackTags:
    Owner: 'Massimo Biagioli'
    Destroy: 'false'

plugins:
  - serverless-plugin-typescript
  - serverless-tscpaths
  - serverless-dynamodb
  - serverless-offline

custom:
  serverless-dynamodb:
    stages:
      - dev
      - test
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      test:
        sources:
          - table: ItPortfolioManager-SkillMatrix-${opt:stage, 'dev'}
            sources: [ ./seed/skill-matrix.json ]
          - table: ItPortfolioManager-UserProfile-${opt:stage, 'dev'}
            sources: [ ./seed/user-profile.json ]
          - table: ItPortfolioManager-Effort-${opt:stage, 'dev'}
            sources: [ ./seed/effort.json ]
          - table: ItPortfolioManager-Task-${opt:stage, 'dev'}
            rawsources: [ ./seed/task.json ]
          - table: "ItPortfolioManager-TimeEntry-${opt:stage, 'dev'}"
            rawsources: [ ./seed/time-entry.json ]

package:
  patterns:
    - node_modules/**
    - .serverless/**

functions:
  app:
    handler: src/handlers/app.handler
    environment:
      STAGE_NAME: ${opt:stage, 'dev'}
      OPENAI_API_KEY_ARN: /it-portfolio-manager/${opt:stage, 'dev'}/openai-api-key
      FIND_TEAM_OPENAI_PROMPT: "  Given the SKILL data:

      [[SKILL]]
      
      and EFFORT 
      
      [[EFFORT]]

      mont_year refers to the month and year, expressed in the format MM_yy
      if effort for one of the requested months is not present, consider avaiableEffort = 100%
      avaiableEffort refers to the effort definitely available, possible avaiable effort refers to the effort potentially available
      try to answer this question: [[QUESTION]]
      Filter only the results that satisfy the effort condition
      Sort the results first by skill score in descending order, then by effort in descending order
      Provide the answer without generating code."

      FIND_SKILLS_OPENAI_PROMPT: '       Your task is to extract the required skills from the sentence by selecting them from SKILLS, respond only with output_format
          sentence: [[QUESTION]]

          SKILLS:
            [[SKILL_LIST]]

          output_format: {"skills":[...]}" '

      FIND_PERIOD_OPENAI_PROMPT: '
        Your task is to find the time period described in the following sentence, respond only in the output_format format:

        sentence: [[QUESTION]]

        if year is not specified consider [[CURRENT_YEAR]]

        output_format: {"start": mm_yy "month_number": ...}"' 

    events:
      - http:
          path: /
          method: ANY
      - http:
          path: /{any+}
          method: ANY

  removeResignedPeople:
    handler: src/handlers/removeResignedPeople.handler
    events:
      - schedule: cron(0 4 * * ? *)
    environment:
      STAGE_NAME: ${opt:stage, 'dev'}
      SLACK_TOKEN_ARN: /it-portfolio-manager/${opt:stage, 'dev'}/slack-token

resources:
  Resources:
    ItPortfolioManagerSkillMatrix:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "ItPortfolioManager-SkillMatrix-${opt:stage, 'dev'}"
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
          - AttributeName: skill
            AttributeType: S
          - AttributeName: company
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
          - AttributeName: skill
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: companyIndex
            KeySchema:
              - AttributeName: company
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    ItPortfolioManagerUserProfile:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "ItPortfolioManager-UserProfile-${opt:stage, 'dev'}"
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
          - AttributeName: company
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: companyIndex
            KeySchema:
              - AttributeName: company
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    ItPortfolioManagerEffort:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "ItPortfolioManager-Effort-${opt:stage, 'dev'}"
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
          - AttributeName: month_year
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
          - AttributeName: month_year
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    ItPortfolioManagerTasks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "ItPortfolioManager-Task-${opt:stage, 'dev'}"
        AttributeDefinitions:
          - AttributeName: customerProject
            AttributeType: S                      
          - AttributeName: company
            AttributeType: S
        KeySchema:
          - AttributeName: company
            KeyType: HASH
          - AttributeName: customerProject
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ItPortfolioManagerTimeEntry:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "ItPortfolioManager-TimeEntry-${opt:stage, 'dev'}"
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S                      
          - AttributeName: timeEntryDate
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
          - AttributeName: timeEntryDate
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1          
