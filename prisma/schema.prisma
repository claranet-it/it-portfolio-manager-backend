// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "./generated"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id                       String               @id @default(uuid())
  domain                   String
  name                     String
  image_url                String?
  skills                   Skill[]
  requestedConnections     CompanyConnections[] @relation("RequesterCompany")
  correspondentConnections CompanyConnections[] @relation("CorrespondentCompany")
  company_keys             CompanyKeys[]
}

model CompanyKeys {
  id                  String  @id @default(uuid())
  company_id          String
  company             Company @relation(fields: [company_id], references: [id])
  encryptedPrivateKey String  @db.Text
  encryptedAESKey     String  @db.Text
  publicKey           String  @db.Text

  @@unique([company_id])
}

model CompanyConnections {
  requester                Company @relation("RequesterCompany", fields: [requester_company_id], references: [id])
  requester_company_id     String
  correspondent            Company @relation("CorrespondentCompany", fields: [correspondent_company_id], references: [id])
  correspondent_company_id String

  @@unique([requester_company_id, correspondent_company_id])
}

model Customer {
  id         String    @id @default(uuid())
  company_id String
  name       String
  inactive   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  projects   Project[]
}

model Project {
  id           String        @id @default(uuid())
  customer     Customer      @relation(fields: [customer_id], references: [id])
  customer_id  String
  name         String
  project_type String        @default("billable")
  is_inactive  Boolean       @default(false)
  plannedHours Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tasks        ProjectTask[]
  completed    Boolean       @default(false)
}

model ProjectTask {
  id            String      @id @default(uuid())
  project       Project     @relation(fields: [project_id], references: [id])
  project_id    String
  name          String
  is_completed  Boolean     @default(false)
  planned_hours Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  time_entries  TimeEntry[]
}

model Skill {
  id           Int     @id @default(autoincrement())
  name         String
  service_line String
  visible      Boolean @default(true)
  company      Company @relation(fields: [company_id], references: [id])
  company_id   String
}

model TimeEntry {
  id              String      @id @default(uuid())
  time_entry_date DateTime
  task            ProjectTask @relation(fields: [task_id], references: [id])
  task_id         String
  hours           Float       @default(0)
  description     String?     @db.Text
  time_start      String?     @db.VarChar(20)
  time_end        String?     @db.VarChar(20)
  email           String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model BusinessCard {
  id        String   @id @default(uuid())
  name      String
  role      String?
  email     String   @unique
  mobile    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CurriculumVitae {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  role        String
  email       String      @unique
  summary     String?     @db.VarChar(1000)
  main_skills String?     @db.VarChar(1000)
  education   Education[]
  work        Work[]
}

model Education {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  curriculum_vitae CurriculumVitae @relation(fields: [curriculum_id], references: [id])
  curriculum_id    String
  note             String?         @db.VarChar(1000)
  year_start       Int
  year_end         Int?
  institution      String
  current          Boolean?
}

model Work {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  curriculum_vitae CurriculumVitae @relation(fields: [curriculum_id], references: [id])
  curriculum_id    String
  note             String?         @db.VarChar(1000)
  year_start       Int
  year_end         Int?
  institution      String
  role             String?
  current          Boolean?
}


model Template {
  id            String        @id @default(uuid())
  email         String        
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  customer_id   String
  project_id    String
  task_id       String?
  timehours     Float         @default(0)
  daytime       String
  date_start    DateTime
  date_end	    DateTime
}